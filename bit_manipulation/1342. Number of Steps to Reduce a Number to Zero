// Without actual bit manipulation.
class Solution {
    public int numberOfSteps (int num) {
        int counter = 0;
        while (num>0){
            if (num%2==0){
                num = num/2;
            } else {
                num = num-1;
            }
            counter++;
        }
        return counter;
    }
}

// Actual bit manipulation solution
For the binary representation from right to left(until we find the leftmost 1):
if we meet 0, result += 1 because we are doing divide;
if we meet 1, result += 2 because we first do "-1" then do a divide;
ony exception is the leftmost 1, we just do a "-1" and it becomse 0 already.

int numberOfSteps (int num) {
		if(!num) return 0;
        int res = 0;
        while(num) {
            res += (num & 1) ? 2 : 1;
            num >>= 1;
        }
        return res - 1;
    }
